name: CI
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 0 * * *' # run at 00:00 UTC


jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go: ['1.13.10', '1.14.2', '1.15.2']
        exclude:
        # This is known to segfault (golang/go#39079)
        - os: macos-latest
          go: 1.14.2
    steps:
    - uses: actions/checkout@v2

    # first download wasmtime's last static library build using python
    - uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - run: python ci/download-wasmtime.py

    # then run our go tests ...
    - uses: actions/setup-go@v1
      with:
        go-version: ${{ matrix.go }}
    - run: go vet
    - run: go test
    - run: go test -tags debug
    - run: go test -tags debug
      env:
        GODEBUG: cgocheck=2
        GOGC: 1
    - name: Test bazel build on *nix
      shell: bash
      run: |
        export GOOS=$(go env GOHOSTOS)
        go get github.com/bazelbuild/bazelisk
        export PATH=$PATH:$(go env GOPATH)/bin
        bazelisk build :go_default_library
        bazelisk test :go_default_test
      if: matrix.os != 'windows-latest'
    - name: Ready msys2
      uses: msys2/setup-msys2@v1
      with:
        msystem: MINGW64
        update: true
        install: git mingw-w64-x86_64-toolchain
        path-type: inherit
      if: matrix.os == 'windows-latest'
    - name: Test bazel build on Windows
      shell: msys2 {0}
      run: |
        go get github.com/bazelbuild/bazelisk
        bazelisk build --compiler=mingw-gcc :go_default_library
        bazelisk test --compiler=mingw-gcc :go_default_test
      if: matrix.os == 'windows-latest'

  coverage:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - run: python ci/download-wasmtime.py
    - uses: actions/setup-go@v1
      with:
        go-version: '1.14'
    - run: go test -coverprofile cover.out ./...
    - run: go tool cover -html=cover.out -o coverage.html
    - uses: actions/upload-artifact@v1
      with:
        name: coverage
        path: coverage.html

  fmt:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v1
      with:
        go-version: '1.14'
    # https://stackoverflow.com/questions/42510140/check-format-for-continous-integration
    - run: "diff -u <(echo -n) <(gofmt -d ./)"

  upload_docs:
    needs: [coverage]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v1
      with:
        name: coverage
    - run: find .
    - name: Push to gh-pages
      run: curl -LsSf https://git.io/fhJ8n | rustc - && (cd coverage && ../rust_out)
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      env:
        GITHUB_DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
        BUILD_REPOSITORY_ID: ${{ github.repository }}
        BUILD_SOURCEVERSION: ${{ github.sha }}
